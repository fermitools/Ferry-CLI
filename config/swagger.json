{
    "swagger": "2.0",
    "info": {
        "description": "FERRY API Documentation.\n(For all APIs, you can also use ferry.fnal.gov:8445/api?help)",
        "title": "FERRY API",
        "contact": {},
        "version": "v2.2.10-64-g92402d4"
    },
    "paths": {
        "/IsUserLeaderOfGroup": {
            "get": {
                "description": "Returns if the user is the leader of the group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns if the user is the leader of the group.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of group to",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of group",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of user to return leader status of",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/IsUserMemberOfGroup": {
            "get": {
                "description": "Returns if the user belongs to the specified group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns if the user belongs to the specified group.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of group to check for association with user",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of group to check for association with user",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of user to verify for the group association",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addCapabilitySetToFQAN": {
            "put": {
                "description": "Associates a capability set with a FQAN.  A FQAN can have one and only one associated capability sets. This method\nwill override any prior setting. LDAP records for all users of the FQAN are immediately updated. That update could take a while.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Associates a capability set with a FQAN.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "role (part of the fqan) to associate the capability set to",
                        "name": "role",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of the capability set to create an assoication with",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation the role belongs to",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addCertificateDNToUser": {
            "post": {
                "description": "Adds a DN certificate for the user, if it does not already exist.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Adds a DN certificate for the user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dn to assign to user",
                        "name": "dn",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation to associatate with the dn",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to whom the dn belongs",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addGroupToUnit": {
            "post": {
                "description": "Adds an existing group to the affiliation unit. The group becomes a part of the affiliation unit.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Adds an existing group to the affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the group to add to the affiliation",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of the group to be added to the affiliation",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "true if this is the primary group for the affiliation - default(false)",
                        "name": "primary",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "true if all new affiliation member's must also be added this this group - not needed if group is primary",
                        "name": "required",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to associate the group with",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addLPCCollaborationGroup": {
            "post": {
                "description": "Adds group to the cms affiliation unit.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snow Wrapper"
                ],
                "summary": "Adds group to the cms affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "lpc group name, must start with lpc",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "quota limit",
                        "name": "quota",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default: B, allowed quotaunit values are B,KB,KIB,MB,MIB,GB,GIB,TB,TIB",
                        "name": "quotaunit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addLPCConvener": {
            "post": {
                "description": "Adds a user as an lpc group's leader\"",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snow Wrapper"
                ],
                "summary": "Adds a user as an lpc group's leader\"",
                "parameters": [
                    {
                        "type": "string",
                        "description": "lpc group name, must start with lpc",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user name of the group's leader",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addOrUpdateUserInLdap": {
            "put": {
                "description": "Adds a user to LDAP iff that user does not already exist in LDAP. For both the new user and an existing user,\nupdates LDAP so the eduPersonEntitlements and isMemberOf records match FERRY's active FQANs for the user.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Adds a non-existant user to LDAP and updates LDAP for an existing user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user whose LDAP data is to be updated",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addScopeToCapabilitySet": {
            "post": {
                "description": "Adds a new scope to a capability set.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Adds a new scope to a capability set.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "scope to add the the capability set",
                        "name": "pattern",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of set to add the pattern",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addUserToExperiment": {
            "post": {
                "description": "Adds a user to an experiment.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Adds a user to an experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the experiment to add the user to",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user name of the user to add to experiment",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/addUserToGroup": {
            "post": {
                "description": "This is probably NOT what you want to run.  This is mostly an internal usage API.  You most likely want\nsetUserAccessToComputeResource which can be run multiple times to add the user to a specific group and cluster.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "This is not the method you are looking for.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the group to add the user too",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the specific type of group",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to add to the group",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/banUser": {
            "put": {
                "description": "Fully bans the user from ALL FERRY use!!  Upon execution, the user will be immediately removed\nfrom LDAP and their status will be set to inactive.  The account will be locked so that no method, except this one,\ncan remove the ban.  The ban must be removed for the user's status to be changed.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Stops a user from access via FERRY.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user to be banned",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "true to ban the user",
                        "name": "banned",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/cleanCondorQuotas": {
            "post": {
                "description": "Cleans expired temporary quotas and bump their permanent counterparts last updated date.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Cleans expired temporary quotas and bump their permanent counterparts last updated date.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/cleanStorageQuotas": {
            "post": {
                "description": "Cleans expired temporary quotas and bump their permanent counterparts last updated date.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Cleans expired temporary quotas and bump their permanent counterparts last updated date.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createAffiliationUnit": {
            "post": {
                "description": "Create this unit in the database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Create this unit in the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "alternitive name for affiliation, if any",
                        "name": "alternitivename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the affiliation",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of affiliation",
                        "name": "unittype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "voms URL, if any",
                        "name": "vomsurl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createCapabilitySet": {
            "post": {
                "description": "Creates a capability set in FERRY's DB and LDAP.  To associate it with an FQAN see addCapabilitySetToFQAN.\nNote: if either tokensubject or vaultstorageky is none, the other must also be none.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Creates a capability set in FERRY's DB and LDAP.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "comma seperated list of scopes to include in set example: compute.create",
                        "name": "pattern",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of the capability set",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default = capabilitySetName@fnal.gov set tokensubject=none to make the JWT use requester's uuid for the subject",
                        "name": "tokensubject",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default = capabilitySetName set to \u201cnone\u201d if no ldap vaultstoragekey should be set",
                        "name": "vaultstoragekey",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createComputeResource": {
            "put": {
                "description": "Creates a compute resource in Ferry's database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Creates a compute resource in Ferry's database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "home directory associated with the resource",
                        "name": "homedir",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return passwd file data for",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "interactive or batch",
                        "name": "resourcetype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default shell for the resource",
                        "name": "shell",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to relate resource to, if any",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createExperiment": {
            "post": {
                "description": "Creates a new experiment in FERRY.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snow Wrapper"
                ],
                "summary": "Creates a new experiment in FERRY.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "primary group name, default: groupname={unitname}",
                        "name": "groupname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "home directory, default: /nashome",
                        "name": "homedir",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "***need a definition of this parameter",
                        "name": "standalone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the affiliation",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "production role name, default username={unitname}pro",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "voms url, default provided which is based on standalone",
                        "name": "vomsurl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createFQAN": {
            "put": {
                "description": "Create a new FQAN in FERRY.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Create a new FQAN in FERRY.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "definition of the FQAN",
                        "name": "fqan",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "group the fqan is mapped to",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "experiment the fqan is for",
                        "name": "unitname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "user the fqan is mapped to, if any",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createGroup": {
            "post": {
                "description": "Given a gid and other group details, add this group to the FERRY database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Given a gid and other group details, add this group to the FERRY database.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "gid of this group",
                        "name": "gid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the group",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "one of ApplicationGroup BatchSuperusers PhysicsGroup WilsonCluster UnixGroup",
                        "name": "grouptype",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createStorageResource": {
            "put": {
                "description": "Creates a storage resourse in Ferry's database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Creates a storage resourse in Ferry's database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the default path for the resource",
                        "name": "path",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the default quota for the resource",
                        "name": "quota",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the unit quota is given in ... B,KB,KIB,MB,MIB,GB,GIB,TB,TIB",
                        "name": "quotaunit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the name of the resource",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "nfs or eos",
                        "name": "resourcetype",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/createUser": {
            "post": {
                "description": "Adds a new user to FERRY.  Note: FERRY's cronjob which talks to userDB and services, normally handles this.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Adds a new user to FERRY.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "date the user's account expires",
                        "name": "expirationdate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "proper name of the user",
                        "name": "fullname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "true is this is a group account - default is false",
                        "name": "groupaccount",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "false to deactivate the account - default is true",
                        "name": "status",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "the uid for of this new user",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user's account name",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/dropCapabilitySet": {
            "post": {
                "description": "Deletes a cabillity set from both FERRY\u2019s database and LDAP. FERRY will not delete a capability set that is in\nuse. (See removeCapabilitySetFromFQAN.)",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Deletes a cabillity set from both FERRY\u2019s database and LDAP.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the capability set to delete",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/dropUser": {
            "put": {
                "description": "Intended for internal cronjob use only.  Moves some  user data to the archive table.  Purposely fails if user is in any table\nexcept user and user_group.   If you need to have someone removed from all tables, ask the FERRY adimistrator\nto run the archiveUser.py script.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Deletes (actually it archives) user from the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user to be deleted",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAffiliationMembers": {
            "get": {
                "description": "Returns all the active users that are members of the affiliation unit.  --For SNOW use getAffiliationUnitMembers.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Returns all the active users that are members of the affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "affiliation to return group the members of",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "unitname:": {
                                        "type": "string"
                                    },
                                    "users": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/definitions/main.unitAffMembers"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAffiliationMembersRoles": {
            "get": {
                "description": "Returns  the list of authorized users for POMS service.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns  the list of authorized users for POMS service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "restrict results to production, analysis or ...",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to restrict authorization list to",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.miscAffMembRoles"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAffiliationUnitComputeResources": {
            "get": {
                "description": "Returns all the compute resources that belongs to the affiliation unit or experiments.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Returns all the compute resources that belongs to the affiliation unit or experiments.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation whose compute are to be returned",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "homedir": {
                                        "type": "string"
                                    },
                                    "resourcename": {
                                        "type": "string"
                                    },
                                    "resourcetype": {
                                        "type": "string"
                                    },
                                    "shell": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAffiliationUnitMembers": {
            "get": {
                "description": "Returns all the users that are members of the affiliation unit.  If you are not SNOW you most likely want getAffiliationMembers.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snow Wrapper"
                ],
                "summary": "Returns all the users that are members of the affiliation unit. (SNOW Method)",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "limit the results to active (true) or inactive (false) members",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return group the members of",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "status": {
                                        "type": "boolean"
                                    },
                                    "uid": {
                                        "type": "integer"
                                    },
                                    "username": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAllAffiliationUnits": {
            "get": {
                "description": "Return all affiliation units stored in FERRY database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Return all affiliation units stored in FERRY database.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to voms vo",
                        "name": "voname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "unitname": {
                                        "type": "string"
                                    },
                                    "vomsurl": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAllComputeResources": {
            "get": {
                "description": "Returns compute resouce settings and affiliations.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Returns compute resouce settings and affiliations.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to a specific type of resource",
                        "name": "resourcetype",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "homedir": {
                                        "type": "string"
                                    },
                                    "resourcename": {
                                        "type": "string"
                                    },
                                    "resourcetype": {
                                        "type": "string"
                                    },
                                    "shell": {
                                        "type": "string"
                                    },
                                    "unitname": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAllGroups": {
            "get": {
                "description": "Returns all groups in the FERRY database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns all groups in the FERRY database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "type of groups to list",
                        "name": "grouptype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.groupAllGroups"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAllGroupsMembers": {
            "get": {
                "description": "Returns the membership of all groups.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns the membership of all groups.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.groupAllGroupsMembers"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAllUsers": {
            "get": {
                "description": "Returns all user accounts",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List all user accounts",
                "parameters": [
                    {
                        "type": "boolean",
                        "format": "true/false",
                        "description": "return only those with the specified status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "return those updated since",
                        "name": "lastupdated",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.allUsersAttributes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAllUsersCertificateDNs": {
            "get": {
                "description": "Returns all the certificate DNs registered for all users.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns DNs registered for all users.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "return those updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "return DNs for inactive users, default active",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "return DNs for specific affiliations",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userCertificates"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getAllUsersFQANs": {
            "get": {
                "description": "Returns all FQANs for all users.  By default includes suspended FQANS - marked as such.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns all FQANs for all users",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "limit to suspended or not suspended",
                        "name": "suspended",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userAllUserFQANs"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getBatchPriorities": {
            "get": {
                "description": "Returns the batch priorities stored for a group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns the batch priorities stored for a group.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return priorities for",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return priorities for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.groupBatchPriorities"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getCapabilitySet": {
            "get": {
                "description": "Returns the definition of or more capability sets, as it is stored in FERRY, with the associated affiliations and FQANs.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Return capability set definitions with related roles and affiliations.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "capability set to return",
                        "name": "setname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "role for which all capability sets are to be returned",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation for which all related capability sets are to be returned",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.ldapCapabilitySet"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getCondorQuotas": {
            "get": {
                "description": "Returns all the condor quotas stored for a group or groups",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns all the condor quotas stored for a group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "compute resource to return quotas for",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return quotas for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.groupCondorQuotas"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGridMapFile": {
            "get": {
                "description": "Returns the contents for a gridmap file for a specific experiment and/or a group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the contents for a gridmap file for a specific experiment and/or a group.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return gridmap file data for",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return gridmap file data for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "dn": {
                                        "type": "string"
                                    },
                                    "username": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGridMapFileByVO": {
            "get": {
                "description": "Returns the contents for a gridmap file for a specific experiment and/or a group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the contents for a gridmap file for a specific experiment and/or a group.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return gridmap file data for",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return gridmap file data for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.miscGridMapFileByVO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupAccessToResource": {
            "get": {
                "description": "Return the groups with access to a unitname/resource.  This method is initially written to return a list of lpc physics groups.\nHowever, it can be used to list other group types as well.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Return the groups with access to a unitname/resource.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "epoch",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to the named resource",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "limit results to a specific affiliation",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupFile": {
            "get": {
                "description": "Returns the contents for a group file for a compute resource assigned to an affiliation unit.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the contents for a group file for a compute resource assigned to an affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return group file data for",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return group file data for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "gid": {
                                        "type": "integer"
                                    },
                                    "groupname": {
                                        "type": "string"
                                    },
                                    "lastupdated": {
                                        "type": "integer"
                                    },
                                    "users": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupGID": {
            "get": {
                "description": "Returns the groupid (intername FERRY identifier).",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basic Queries"
                ],
                "summary": "Returns the groupid (intername FERRY identifier).",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the group",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.miscGroupGID"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupLeadersinAffiliationUnit": {
            "get": {
                "description": "Returns all the groups within the unit and the leaders of each group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Returns all the groups within the unit and the leaders of each group.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "affiliation to return leader data for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "groupname": {
                                        "type": "string"
                                    },
                                    "grouptype": {
                                        "type": "string"
                                    },
                                    "uid": {
                                        "type": "integer"
                                    },
                                    "username": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupMembers": {
            "get": {
                "description": "Returns all the members of the specified group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns all the members of the specified group.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group to limit the results to",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "specific type of group to show results for - case sensitive",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "display if user is a leader for the group - default false",
                        "name": "leader",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupName": {
            "get": {
                "description": "Returns the groupname.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basic Queries"
                ],
                "summary": "Returns the groupname.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GID of the group",
                        "name": "gid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.miscGroupName"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupStorageQuota": {
            "get": {
                "description": "Returns the storage quota stored for this group within the storage resource.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns the storage quota stored for this group within the storage resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of group to return quotas of",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "One of B, MB, MiB, GB, GiB, TB, TiB",
                        "name": "quotaunit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "storage resource to return quotas for",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return quotas for",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.groupStorageQuota"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupUnits": {
            "get": {
                "description": "Returns all the affiliation units the group belongs to.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Returns all the affiliation units the group belongs to.",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "return only the affiliation units the group belongs to",
                        "name": "experiment",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of group",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of group",
                        "name": "grouptype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.groupUnits"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getGroupsInAffiliationUnit": {
            "get": {
                "description": "Returns all the groups that belong to the unit including unix and virtual groups.  Note that Virtual groups do\nnot have a gid assigned.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Returns all the groups that belong to the unit including unix and virtual groups.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "type of group to restrict data to",
                        "name": "grouptype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return group data for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "gid": {
                                        "type": "integer"
                                    },
                                    "groupname": {
                                        "type": "string"
                                    },
                                    "grouptype": {
                                        "type": "string"
                                    },
                                    "primary": {
                                        "type": "boolean"
                                    },
                                    "unitname": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getMappedGidFile": {
            "get": {
                "description": "Returns the contents of a file that lists all the fqans and the usernames and gids these fqans are mapped into.\nThis method is primarily needed by storage access. It defines which gid a role should be mapped into for file\naccess. The mapped username and groupname are kept in Ferry for each fqan.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the contents of a file that lists all the fqans and the usernames and gids these fqans are mapped into.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "fqan": {
                                        "type": "string"
                                    },
                                    "mapped_gid": {
                                        "type": "integer"
                                    },
                                    "mapped_uname": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getMemberAffiliations": {
            "get": {
                "description": "Returns the affiliations the user is a member of.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns the affiliations the user is a member of.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user to list whose membership will be listed",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userMemberAffiliations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getPasswdFile": {
            "get": {
                "description": "Returns the contents for a passwd file with all the members of an affiliation unit.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the contents for a passwd file with all the members of an affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return passwd file data for",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "format": "true/false",
                        "description": "return only those with the specified status, default all",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to return passwd file data for",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.miscUserPasswdGrps"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getStorageAuthzDBFile": {
            "get": {
                "description": "Returns the list of authorized users for the dCache server.  There are two different JSON outputs provided based\non the the parameter passwdmode.  (Now how do you show that in swagger?)",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the list of authorized users for the dCache server.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Changes the JSON struct output.  Why?  I have no idea.",
                        "name": "passwdmode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getStorageQuotas": {
            "get": {
                "description": "Returns the storage quota allocated for a user on a resource.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns the storage quota allocated for a user on a resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group to limit results to",
                        "name": "groupname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to a specific resource",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to a specific user",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userStorageQuotas"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getStorageResourceInfo": {
            "get": {
                "description": "Returns the contents for a group file for a compute resource assigned to an affiliation unit.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Returns the contents for a group file for a compute resource assigned to an affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "resource to return information for",
                        "name": "resourcename",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "path": {
                                        "type": "string"
                                    },
                                    "quota": {
                                        "type": "integer"
                                    },
                                    "quotaunit": {
                                        "type": "string"
                                    },
                                    "resourcename": {
                                        "type": "string"
                                    },
                                    "resourcetype": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserAccessToComputeResources": {
            "get": {
                "description": "Return a list of all the compute and storage resources the user has access to.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Return a list of all the compute and storage resources the user has access to.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "user to be assigned to fqan/affiliation",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userComputeResources"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserCertificateDNs": {
            "get": {
                "description": "Returns all the certificate DNs registered for users. If the optional unitname variable\nis set, it only returns a list of certificate DNs registered with the specified experiment name.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns DNs registered for users.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "limit DNs to specified affiliation",
                        "name": "unitname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "specific user to return DNs for",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userCertificates"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserExternalAffiliationAttributes": {
            "get": {
                "description": "Returns the external affiliation attributes assigned to a user.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns the external affiliation attributes assigned to a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "attribute to be removed",
                        "name": "attribute",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user whose attribute is to be removed",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userExternalAttributes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserFQANs": {
            "get": {
                "description": "Given a username, returns all the FQANs a user is assigned to broken down by experiment names.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns the FQANs a user is assigned.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to FQANs for a specific affiliation",
                        "name": "unitname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to the user",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userFQANS"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserGroups": {
            "get": {
                "description": "Returns the gid and group names of all the groups the user is member of.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns the gid and group names of all the groups the user is member of.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit results to the user",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userGroups"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserGroupsForComputeResource": {
            "get": {
                "description": "Returns attributes of compute resources and associated users.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Returns attributes of compute resources and associated users.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "type of the compute resource to restrict results to",
                        "name": "resourcetype",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "status of the users to restrict results to, default all",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to limit results to",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.userGroupComputeResources"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserInfo": {
            "get": {
                "description": "For a specific user, returns the entity attributes. You must supply ONE of username or uid or vopersonid.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Return attributes for a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user for whom the attributes are to be returned",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "uid for whom the attributes are to be returned",
                        "name": "uid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "UUID for whom the attributes are to be returned",
                        "name": "vopersonid",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userAttributes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserLdapInfo": {
            "get": {
                "description": "Returns the user's LDAP data, directly from LDAP, not FERRY's DB.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Returns the user's LDAP data, directly from LDAP, not FERRY's DB.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user to return LDAP data for",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.LDAPUserData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserShellAndHomeDir": {
            "get": {
                "description": "Some users have preferences over the types of shell they use. This method returns those preferences.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Return the users prefrences for shell and home dir.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to aquire data for",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "limits results to a specific user",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userShellAndHomeDir"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserStorageQuota": {
            "get": {
                "description": "Returns the storage quota for a resource applied to a user, if any.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Returns the user's storage quota.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "resource for which the quota is to be given",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation the quota is for",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user whose quota is to be given",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.userStorageQuota"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserUID": {
            "get": {
                "description": "Returns the UID associated with a username.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basic Queries"
                ],
                "summary": "Returns the UID associated with a username.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user whose UID will be returned",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getUserUname": {
            "get": {
                "description": "Returns the username associated with a UID.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basic Queries"
                ],
                "summary": "Returns the username associated with a UID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "uid for which the username will be returned",
                        "name": "uid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getVORoleMapFile": {
            "get": {
                "description": "Returns the contents for a grid-vorolemap file for a specific experiment and/or a group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the contents for a grid-vorolemap file for a specific experiment and/or a group.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "limit results to records  updated since",
                        "name": "lastupdated",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return gridmap file data for",
                        "name": "resourcename",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "fqan": {
                                        "type": "string"
                                    },
                                    "unitname": {
                                        "type": "string"
                                    },
                                    "username": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/getVOUserMap": {
            "get": {
                "description": "Returns the contents for a grid-vorolemap file.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization Queries"
                ],
                "summary": "Returns the contents for a grid-vorolemap file.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "restrict returned data to a specific fqan",
                        "name": "fqan",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "restrict returned data to a specific affiliatiion",
                        "name": "unitname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "restruct returned data to a specific user",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.miscVOUserMap"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/lookupCertificateDN": {
            "get": {
                "description": "Returns the uid and the username who is assigned to a certificate DN.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basic Queries"
                ],
                "summary": "Returns the uid and the username who is assigned to a certificate DN.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "certificate DN to look up",
                        "name": "dn",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.miscDNowner"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Run Silent, Run Deep.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basic Queries"
                ],
                "summary": "Dive! Dive! Dive!",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeAffiliationUnit": {
            "put": {
                "description": "Remove an affiliation from the database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Remove an affiliation from the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "affiliation to remove from FERRY",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeCapabilitySetFromFQAN": {
            "put": {
                "description": "Removes, disassociates, a capability from a FQAN.  Immediately updates LDAP for all users of the FQAN.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Removes, disassociates, a capability from a FQAN.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "role to remove capability set from",
                        "name": "role",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of the capability set to be removed",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation associated with the role",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeCondorQuota": {
            "put": {
                "description": "Remove the corresponding condor quota of a group/resource.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Remove the corresponding condor quota of a group/resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the condor group to remove the quota from",
                        "name": "condorgroup",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "compute resource to remove the quota from",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeFQAN": {
            "put": {
                "description": "Removes an FQAN from FERRY.  The FQAN to be removed cannot have any users attached to it.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Removes an FQAN from FERRY.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "definition of the FQAN to be removed",
                        "name": "fqan",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeGroupFromUnit": {
            "put": {
                "description": "Disassociates the group from an affiliation.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Disassociates the group from an affiliation.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the group to be disassociated",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of the group to be disassociated",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation the group is associated with",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeGroupLeader": {
            "put": {
                "description": "Removes the group leadership privilege from a user.  The user's association with the group is not altered.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Removes the group leadership privilege from a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of group",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of group",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of user to remove leadership privilege from",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeLPCConvener": {
            "put": {
                "description": "Removes a user from being an group's leader\"",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snow Wrapper"
                ],
                "summary": "Removes a user from being an lpc group's leader\"",
                "parameters": [
                    {
                        "type": "string",
                        "description": "lpc group name, must start with lpc",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "if exists, removes user access from resource",
                        "name": "removegroup",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "user name to be removed from being a group leader",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeScopeFromCapabilitySet": {
            "put": {
                "description": "Removes, deletes, a scope record from its capability set both in FERRY\u2019s DB and in LDAP.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Removes, deletes, a scope record from its capability set both in FERRY\u2019s DB and in LDAP.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "scope to remove from the capability set",
                        "name": "pattern",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of the capability set to modify",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserAccessFromResource": {
            "put": {
                "description": "Removes the user\u2019s interactive access from a group on a resource.  If the group is a primary group for the\nresources and user doesn\u2019t belong to any other group on this resource, the user will no longer show up in the\npassword file for the resource. If the group is not primary group then the user will not be listed in resource\ngroup file for this group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Removes the user\u2019s interactive access from a group on a resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group to remove users access from",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user whose access is to be removed",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource the access will be removed from",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserCertificateDN": {
            "put": {
                "description": "Removes a DN certificate from, the user, if it exists.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Removes a DN certificate from the user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "dn remove from the user",
                        "name": "dn",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to whom the dn belongs",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserExperimentFQAN": {
            "post": {
                "description": "Remove a user from a specific experiment's FQAN.  You must provide either a fqan or role.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Remove a user from a specific experiment's FQAN.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "fqan to remove from user",
                        "name": "fqan",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "role to remove user from",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to limit assignment too",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to be assigned to fqan/affiliation",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserExternalAffiliationAttribute": {
            "put": {
                "description": "Removes an external affiliation attribute and value from a user.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Removes an external affiliation attribute and value from a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "attribute to be removed",
                        "name": "attribute",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user whose attribute is to be removed",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserFromComputeResource": {
            "put": {
                "description": "Removes the user from the specified compute resource.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Removes the user from the specified compute resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "compute resource to remove user from",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of resource to disassocaite the user from",
                        "name": "resourcetype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to be disassociated from the resource",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "group for which the user is to be disassociated from the resource",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserFromExperiment": {
            "put": {
                "description": "Removes a user from an experiment. Specifically, this removes the user's relationships to the experiment's resources, FQANs, certificates and storage quotas from the specified user. NOTE: API is unable to remove the user from groups as a group may be connected to multiple affiliations.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Removes a user from an experiment.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the experiment to remove the user from",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user name of the user to remove from the experiment",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserFromGroup": {
            "put": {
                "description": "Remove this group membership from the user.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Remove this group membership from the user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the group to remove the user from",
                        "name": "group",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the specific type of group",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to remove from membership in the group",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/removeUserFromLdap": {
            "put": {
                "description": "Removes a user from LDAP, providing the user has a voPersonID stored in FERRY. If not, the LDAP record will\nneed to be removed with direct LDAP commands or by running syncLdapWithFerry. -- Use getUserLdapInfo to verify\nthe voPersonID exists.  Be aware, syncLdapWithFerry (runs nightly in cron) will restore the LDAP records if\nthe user is active.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Removes a user from LDAP.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user to be assigned to fqan/affiliation",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setAffiliationUnitInfo": {
            "put": {
                "description": "Modify the affiliation unit info in the database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Modify the affiliation unit info in the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "alternitive name for affiliation, if any",
                        "name": "alternitivename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the affiliation to change the attributes on",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of affiliation",
                        "name": "unittype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "voms URL, if any",
                        "name": "vomsurl",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setCapabilitySetAttributes": {
            "put": {
                "description": "Alters attributes of a capability set in both FERRY\u2019s DB and LDAP.  Due to the LDAP/FERRY associations, you cannot\nchange the name of a CS.  Create a new one and delete the existing one.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Alters attributes of a capability set in both FERRY\u2019s DB and LDAP.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the set to change attributes of",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tokensubject to change the tokensubject too",
                        "name": "tokensubject",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "vaultstroagekey to change the vaultstoragekey too",
                        "name": "vaultstoragekey",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setComputeResourceInfo": {
            "post": {
                "description": "Modifies the settings for a specific compute resource.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Modifies the settings for a specific compute resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "home directory associated with the resource",
                        "name": "homedir",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to return passwd file data for",
                        "name": "resourcename",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "interactive or batch",
                        "name": "resourcetype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default shell for the resource",
                        "name": "shell",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to relate resource to, if any",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setCondorQuota": {
            "post": {
                "description": "Set the condor quota for a given group over a compute resource.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Set the condor quota for a given group over a compute resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the condor group to set a quota on",
                        "name": "condorgroup",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "Date",
                        "description": "date the quota expires ",
                        "name": "expirationdate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "quota limit to set",
                        "name": "quota",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of compute resource to set a quota on",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "percentage quota may be exceeded by for a limited time",
                        "name": "surplus",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setFQANMappings": {
            "put": {
                "description": "Set the attributes on an FQAN.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Affiliation/Experiment"
                ],
                "summary": "Set the attributes of an FQAN.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "definition of the FQAN",
                        "name": "fqan",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "group the fqan is to be mapped to",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user the fqan is to be mapped to, if any",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setGroupLeader": {
            "put": {
                "description": "Sets this user as a group leader. If the user is not part of the group, the user will be added at the same time. A\ngroup can have multiple group leaders.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Sets user as leader of the group.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of group",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of group",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of user to make a leader",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setGroupRequired": {
            "put": {
                "description": "Sets or unsets the group to be required for a specific affiliation's members. If true, all new members, added\nto an experiment, will be added to the group.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Sets or unsets the group to be required for a specific affiliation's members.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of the group being set/unset as required",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "type of the group to be set/upset as required",
                        "name": "grouptype",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "true if all affiliation members must be added to the group",
                        "name": "required",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation the group is associated with",
                        "name": "unitname",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setLPCStorageAccess": {
            "post": {
                "description": "Sets the storage access for the LPC members. User should provide the certificate DN (usually CERN certificate) and cern user name.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Snow Wrapper"
                ],
                "summary": "Sets the storage access for the LPC members.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's dn, usually a CERN certificate",
                        "name": "dn",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "CERN username",
                        "name": "externalusername",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FNAL username",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setPrimaryStatusGroup": {
            "put": {
                "description": "Makes a group the primary group for the specified affiliation unit.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Groups"
                ],
                "summary": "Makes a group the primary group for the specified affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of group to set as primary",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation of the group to set as primary",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setStorageQuota": {
            "put": {
                "description": "Sets the storage quota assigned for a user or group when \u201cgroupaccount\u201d is true.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Sets the storage quota assigned for a user or group when \u201cgroupaccount\u201d is true.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "date quota expires",
                        "name": "expirationdate",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "set to true if this is a user account",
                        "name": "groupaccount",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "** required for group accounts",
                        "name": "groupname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "** required for user accounts",
                        "name": "path",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "quota limit -- value adjusted by quotaunit",
                        "name": "quota",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "allowed quotaunit values are B,KB,KIB,MB,MIB,GB,GIB,TB,TIB",
                        "name": "quotaunit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource to apply quota on",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation to apply quota on",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "** required for user accounts",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setStorageResourceInfo": {
            "post": {
                "description": "Modify the settings for a storage resource in the database.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Compute and Storage Resources"
                ],
                "summary": "Modify the settings for a storage resource in the database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the default path for the resource",
                        "name": "path",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the default quota for the resource",
                        "name": "quota",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the unit quota is given in ... B,KB,KIB,MB,MIB,GB,GIB,TB,TIB",
                        "name": "quotaunit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "the name of the resource to be modified",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "nfs or eos",
                        "name": "resourcetype",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setUserAccessToComputeResource": {
            "put": {
                "description": "Given a username and a resource, it allows the user to have interactive access to the resource.\n*** Be sure you understand the comments on the parameter 'primary'.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Allows the user to have interactive access with a resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group through which access is provided",
                        "name": "groupname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "home directory to use, if different from the default",
                        "name": "homedir",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "if true this group is primary for the resource -- ONLY the user's records marked as primary appear in the passwd file - getPasswdFile.  ONLY records NOT marked as primary appear in the group file - getGroupFile.",
                        "name": "primary",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "compute resource to which the user is being given access",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "shell to use, if different from the default",
                        "name": "shell",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "user being given access to the resource",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setUserExperimentFQAN": {
            "post": {
                "description": "Assign a user to a specific experiment FQAN.  You must provide role or fqan.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Assign a user to a specific experiment FQAN.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "fqan to assign user to",
                        "name": "fqan",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "role to assign user to",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "affiliation to limit assignment too",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to be assigned to fqan/affiliation",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setUserExternalAffiliationAttribute": {
            "post": {
                "description": "It sets an external affiliation attribute and value for a user. Normally, the  attribute name is most likely the cern_username\nand affiliation value is the actual uname at CERN.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Sets an external affiliation attribute and value for a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "attribute, 'key' to be set",
                        "name": "attribute",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user to be assigned the attribute",
                        "name": "username",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "value provided for the attribute",
                        "name": "value",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setUserGridAccess": {
            "put": {
                "description": "Allows the application of the \"Naughty Policy\" by restricting the user's privileges associated with an\nexperiment's FQANs until it is restored by this same method.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Restricts the user the privileges associated with an experiment's FQANs.",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "true to restrict the user from using the FQAN, false to remove the restriction",
                        "name": "suspend",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation to limit the user's FQAN access on",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user whose FQAN is to be limited",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setUserInfo": {
            "put": {
                "description": "Updates a set of attributes belonging to a user.\nNOTE: A Banned user's status cannot be set to true -- see the API banUser.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Updates a set of attributes belonging to a user.",
                "parameters": [
                    {
                        "type": "string",
                        "format": "date",
                        "description": "date the user's account expires",
                        "name": "expirationdate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "proper name of the user",
                        "name": "fullname",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "true is this is a group account - default is false",
                        "name": "groupaccount",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "false to deactivate the account - default is true",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "user whose attributes are to be set",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setUserShell": {
            "put": {
                "description": "Some users have preferences over the types of shell they use. This method sets the user shell for all resources\nin an affiliation unit. Users who have not specified any preferences, will get the default value.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "This method sets the user shell for all resources in an affiliation unit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "shell to set as default",
                        "name": "shell",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "affiliation whose resources will have this shell as default",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user whose defaults are being set",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/setUserShellAndHomeDir": {
            "put": {
                "description": "Some users have preferences over the types of shell they use. This method sets the user shell and home directory\nfor a specific compute resource. Users who have not specified any preferences, will get the default value.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "This method sets the user shell and home directory for a specific compute resource.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "home directory to set as default",
                        "name": "homedir",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "compute resource the default will apply to",
                        "name": "resourcename",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "shell to set as default",
                        "name": "shell",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user whose defaults are being set",
                        "name": "username",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/syncLdapWithFerry": {
            "put": {
                "description": "Synchronize all USER LDAP data to FERRY with FERRY as the source of truth.\nDoes NOT synchronize capability sets and scopes.\n1. Removes all records in LDAP which have no corresponding record in FERRY, or are not active users in FERRY.\n2. Adds all active FERRY users to LDAP which are missing from LDAP.\n3. Verifies the capability sets in LDAP are set properly for each user, per their FQANs, correcting LDAP as needed.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Synchronize all USER LDAP data to FERRY with FERRY as the source of truth.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/updateLdapForAffiliation": {
            "put": {
                "description": "Verifies and where necessary updates the LDAP records of every member in the affiliation to conform to what is\nin FERRY\u2019s database.  Be aware, affiliation simply provides the list of people.   However all their LDAP records will be\nupdated, include those in other affiliations.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Verifies and where necessary updates the LDAP records of every member in the affiliation to conform to what is in FERRY\u2019s database.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "affiliation whose member's ldap records are to be updated.",
                        "name": "unitname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        },
        "/updateLdapForCapabilitySet": {
            "put": {
                "description": "Verifies and where necessary updates the LDAP records of every user who has the FQAN associaited with the capability set\nto what is in in FERRY\u2019s database.  Be aware, the setname simply provides the list of people.   However all their LDAP\nrecords will be updated, include those in other capability sets.",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LDAP"
                ],
                "summary": "Verifies and where necessary updates the LDAP records of every user who has the FQAN associaited with the capability set.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "setname to use for obtaining the list of members to update",
                        "name": "setname",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/main.jsonOutput"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.LDAPUserData": {
            "type": "object",
            "properties": {
                "cn": {
                    "type": "string"
                },
                "dn": {
                    "type": "string"
                },
                "eduPersonEntitlement": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "eduPersonPrincipalName": {
                    "type": "string"
                },
                "givenName": {
                    "type": "string"
                },
                "isMemberof": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mail": {
                    "type": "string"
                },
                "objectClass": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sn": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "voPersonExternalID": {
                    "type": "string"
                },
                "voPersonID": {
                    "type": "string"
                }
            }
        },
        "main.allUsersAttributes": {
            "type": "object",
            "properties": {
                "banned": {
                    "type": "boolean"
                },
                "expirationdate": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "uid": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "vopersonid": {
                    "type": "string"
                }
            }
        },
        "main.groupAllGroups": {
            "type": "object",
            "properties": {
                "gid": {
                    "type": "integer"
                },
                "groupname": {
                    "type": "string"
                },
                "grouptype": {
                    "type": "string"
                }
            }
        },
        "main.groupAllGroupsMembers": {
            "type": "object",
            "properties": {
                "gid": {
                    "type": "integer"
                },
                "groupname": {
                    "type": "string"
                },
                "grouptype": {
                    "type": "string"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.groupMembers"
                    }
                }
            }
        },
        "main.groupBatchPriorities": {
            "type": "object",
            "properties": {
                "condorgroup": {
                    "type": "string"
                },
                "expiratioindate": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "main.groupCondorQuotas": {
            "type": "object",
            "properties": {
                "condorgroup": {
                    "type": "string"
                },
                "expirationdate": {
                    "type": "string"
                },
                "resourcetype": {
                    "type": "string"
                },
                "surplus": {
                    "type": "boolean"
                },
                "unitname": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "main.groupMembers": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.groupStorageQuota": {
            "type": "object",
            "properties": {
                "expirationdate": {
                    "type": "string"
                },
                "quota": {
                    "type": "number"
                },
                "quotaunit": {
                    "type": "string"
                }
            }
        },
        "main.groupUnits": {
            "type": "object",
            "properties": {
                "alternativename": {
                    "type": "string"
                },
                "unitname": {
                    "type": "string"
                },
                "unittype": {
                    "type": "string"
                },
                "vomsurl": {
                    "type": "string"
                }
            }
        },
        "main.jsonOutput": {
            "type": "object",
            "properties": {
                "ferry_error": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ferry_output": {},
                "ferry_status": {
                    "type": "string"
                }
            }
        },
        "main.ldapCapabilitySet": {
            "type": "object",
            "properties": {
                "patterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.ldapRole"
                    }
                },
                "setname": {
                    "type": "string"
                }
            }
        },
        "main.ldapRole": {
            "type": "object",
            "properties": {
                "fqan": {
                    "type": "string"
                },
                "mappedgroup": {
                    "type": "string"
                },
                "mappeduser": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "unitname": {
                    "type": "string"
                }
            }
        },
        "main.miscAffMembRoles": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "UID": {
                            "type": "integer"
                        },
                        "UUID": {
                            "type": "string"
                        },
                        "fqan": {
                            "type": "string"
                        },
                        "fullname": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "main.miscDNowner": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.miscGridMapFileByVO": {
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "properties": {
                    "dn": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                }
            }
        },
        "main.miscGroupGID": {
            "type": "object",
            "properties": {
                "gid": {
                    "type": "integer"
                },
                "groupid": {
                    "type": "integer"
                }
            }
        },
        "main.miscGroupName": {
            "type": "object",
            "properties": {
                "groupname": {
                    "type": "string"
                }
            }
        },
        "main.miscUserPasswd": {
            "type": "object",
            "properties": {
                "gecos": {
                    "type": "string"
                },
                "gid": {
                    "type": "integer"
                },
                "homedir": {
                    "type": "string"
                },
                "shell": {
                    "type": "string"
                },
                "uid": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.miscUserPasswdGrps": {
            "type": "object",
            "properties": {
                "lastupdated": {
                    "type": "integer"
                },
                "resources": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/main.miscUserPasswd"
                    }
                }
            }
        },
        "main.miscVOUserMap": {
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                    "type": "object"
                }
            }
        },
        "main.unitAffMembers": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "main.userAllUserFQAN": {
            "type": "object",
            "properties": {
                "fqan": {
                    "type": "string"
                },
                "suspend": {
                    "type": "boolean"
                },
                "unitname": {
                    "type": "string"
                }
            }
        },
        "main.userAllUserFQANs": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/main.userAllUserFQAN"
                    }
                }
            }
        },
        "main.userAttributeValues": {
            "type": "object",
            "properties": {
                "attribute": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "main.userAttributes": {
            "type": "object",
            "properties": {
                "banned": {
                    "type": "boolean"
                },
                "expirationdate": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "groupaccount": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                },
                "uid": {
                    "type": "integer"
                },
                "vopersonid": {
                    "type": "string"
                }
            }
        },
        "main.userCertificates": {
            "type": "object",
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.userComputeResources": {
            "type": "object",
            "properties": {
                "groupname": {
                    "type": "string"
                },
                "homedir": {
                    "type": "string"
                },
                "resourcename": {
                    "type": "string"
                },
                "resourcetype": {
                    "type": "string"
                },
                "shell": {
                    "type": "string"
                }
            }
        },
        "main.userExternalAttributes": {
            "type": "object",
            "properties": {
                "userAttValue": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.userAttributeValues"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "main.userFQANS": {
            "type": "object",
            "properties": {
                "fqan": {
                    "type": "string"
                },
                "unitname": {
                    "type": "string"
                }
            }
        },
        "main.userGroupComputeResources": {
            "type": "object",
            "properties": {
                "resourcename": {
                    "type": "string"
                },
                "resourcetype": {
                    "type": "string"
                },
                "unitname": {
                    "type": "string"
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/main.userUserComputeResources"
                    }
                }
            }
        },
        "main.userGroups": {
            "type": "object",
            "properties": {
                "gid": {
                    "type": "integer"
                },
                "groupname": {
                    "type": "string"
                },
                "grouptype": {
                    "type": "string"
                }
            }
        },
        "main.userMemberAffiliations": {
            "type": "object",
            "properties": {
                "alternativename": {
                    "type": "string"
                },
                "unitname": {
                    "type": "string"
                }
            }
        },
        "main.userShellAndHomeDir": {
            "type": "object",
            "properties": {
                "homedir": {
                    "type": "string"
                },
                "shell": {
                    "type": "string"
                }
            }
        },
        "main.userStorageQuota": {
            "type": "object",
            "properties": {
                "expirationdate": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "quotaunit": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "main.userStorageQuotas": {
            "type": "object",
            "properties": {
                "groups": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/definitions/main.userStoreQuotas"
                        }
                    }
                },
                "users": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/definitions/main.userStoreQuotas"
                        }
                    }
                }
            }
        },
        "main.userStoreQuotas": {
            "type": "object",
            "properties": {
                "expirationdate": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "quota": {
                    "type": "integer"
                },
                "quotaunit": {
                    "type": "string"
                }
            }
        },
        "main.userUserComputeResources": {
            "type": "object",
            "properties": {
                "groupname": {
                    "type": "string"
                },
                "primary": {
                    "type": "boolean"
                },
                "status": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "request_url": "https://ferry.fnal.gov:8445/docs/swagger.json"
}
